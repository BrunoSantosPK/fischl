<!DOCTYPE html>
<html lang="pt-br">

    <head>
        <%- include("../layouts/head"); %>
        <title>Matriz de Personalidade</title>
    </head>

    <body>
        <%- include("../layouts/header"); %>

        <div class="container page">

            <div class="row" id="detail">
                <div class="col-12">
                    <h1>Sua Matriz de Personalidade</h1>
                    <h2>Entenda o seu perfil comportamental com suas fortalezas e fraquezas</h2>

                    <p>Bem-vinda(o),<br>aqui na Matriz você pode fazer um teste para avaliação do seu perfil. Trabalhamos com o teste mais validado dos artigos de psicometria, o Big-5. Com um único teste, você receberá uma avaliação comportamental e seu MBTI. É super rápido e gratuito, topa? Só clicar no botão abaixo e começar a responder.</p>
                </div>
            </div>

            <div class="row hide" id="question-group-1"></div>

            <div class="row hide" id="question-group-2"></div>

            <div class="row hide" id="question-group-3"></div>

            <div class="row hide" id="question-group-4"></div>

            <div class="row hide" id="question-group-5"></div>

            <div class="row">
                <div class="col-12">
                    <div class="button-home" onclick="next()">
                        COMEÇAR
                    </div>
                </div>
            </div>
        </div>

    </body>

    <script>

        // Máquina de estado
        const questions = [];
        const state = {
            ip: "",
            mode: "home",
            currentPage: "detail",
            startTime: 0,
            pages: ["detail", "question-group-1", "question-group-2", "question-group-3", "question-group-4", "question-group-5"]
        };

        async function init() {
            try {
                // Carrega questões likert para formulário Big-5
                let req = await fetch("/form");
                let res = await req.json();

                if(res.statusCode != 200)
                    throw new Error("Erro na requisição");

                res.data.questions.forEach(item => {
                    questions.push({
                        text: item.Text,
                        direction: item.Direction,
                        id: item.Id,
                        value: 0
                    });
                });
                createQuestions();

                // Recupera IP do usuário
                req = await fetch("https://api.ipify.org/?format=json");
                res = await req.json();
                state.ip = res.ip;

            } catch(error) {
                console.log(error);
            }
            
        }

        function getLimitsQuestions(part) {
            const init = (part - 1) * 10;
            const finish = part * 10;
            return { init, finish };
        }

        function createQuestions() {
            for(let j = 1; j <= 5; j++) {
                // Recupera o elemento para alocação da bateria de perguntas
                let group = document.getElementById(`question-group-${j}`);
                let { init, finish } = getLimitsQuestions(j);

                for(let i = init; i < finish; i++) {
                    // Cadastra as divs de utilização
                    let row = document.createElement("div");
                    let col1 = document.createElement("div");
                    let col2 = document.createElement("div");

                    row.classList.add("row");
                    row.classList.add("row-likert");

                    col1.classList.add("col-lg-4");
                    col1.innerHTML = questions[i].text;

                    col2.classList.add("col-lg-8");
                    col2.classList.add("area-likert");

                    // Cria as caixas de seleção likert
                    const buttons = [];
                    [
                        "Discordo totalmente",
                        "Discordo parcialmente",
                        "Nem concordo e nem discordo",
                        "Concordo parcialmente",
                        "Concordo totalmente"
                    ].forEach((tag, i) => {
                        let button = document.createElement("div");
                        button.classList.add("button-likert");
                        button.innerHTML = tag;
                        buttons.push(button);
                        col2.appendChild(button);
                    });

                    // Cadastra o evento de click
                    const callback = (index) => {
                        buttons.forEach((node, j) => {
                            node.classList.remove("select-likert");
                            if(j == index) {
                                node.classList.add("select-likert");
                                questions[i].value = j + 1;
                            }
                        });
                    };
                    buttons.forEach((node, i) => node.addEventListener("click", () => callback(i)));

                    // Finaliza as alocações de elementos na row
                    row.appendChild(col1);
                    row.appendChild(col2);
                    group.appendChild(row);
                }
            }
        }

        function next() {
            // Define uma callback para ocultar todas as páginas
            const render = (showPage) => {
                state.pages.forEach(page => {
                    let node = document.getElementById(page);
                    node.classList.add("hide");
                    if(page == showPage) {
                        node.classList.remove("hide");
                        state.currentPage = showPage;
                    }
                });
            };

            // Define a verificação se a página atual possui pendências
            const isOk = () => {
                const parts = state.currentPage.split("-");
                let valid = true;

                if(parts.length == 3) {
                    const { init, finish } = getLimitsQuestions(parseInt(parts[2]));
                    for(let i = init; i < finish; i++) {
                        if(questions[i].value == 0) {
                            valid = false;
                            break;
                        }
                    }
                }
                return valid;
            };

            // Verifica qual será a pŕoxima página a ser exibida
            const index = state.pages.indexOf(state.currentPage);
            const nextPage = (index == state.pages.length - 1) ? "result" : state.pages[index + 1];
            if(index == 1) {
                state.startTime = Date.now();
            }

            if(nextPage == "result") {
                submit();
                return;
            }

            if(isOk())
                render(nextPage);
            else
                alert("Existem questões não respondidas, por favor verifique antes de continuar.");
        }

        async function submit() {
            const data = [];
            const duration = (Date.now() - state.startTime) / 1000;
            questions.forEach(item => data.push({ value: item.value, id: item.id }));
            const req = await fetch("/form", {
                method: "POST",
                body: JSON.stringify({
                    questions: data,
                    ip: state.ip,
                    duration,
                }),
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json"
                }
            });
            const res = await req.json();
            console.log(res);
        }

        init();

    </script>

</html>